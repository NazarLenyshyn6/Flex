""" 
This module provides a flexible decorator factory `subprocess_command_executor` for executing 
CLI commands generated by a wrapped function. It handles execution using Pythonâ€™s `subprocess` module 
and supports optional output capturing, timeout handling, and error reporting.

It is designed specifically for executing commands involving the `claude` CLI tool, with graceful 
error handling when the tool is missing or the command fails.

Returns structured `CommandExecutionResult` DTOs to standardize command outputs.
"""


from typing import ParamSpec, Callable, Sequence, Optional
import shutil
import subprocess

from functools import wraps

from dto.command_dto import CommandExecutionResult

P = ParamSpec("P")


def subprocess_command_executor(capture_output: bool, timeout: Optional[int] = None) -> Callable[
    [Callable[P, Sequence[str]]], Callable[P, Optional[CommandExecutionResult]]
]:
    """
    A decorator factory that executes CLI commands returned by the decorated function
    using the `subprocess` module, with optional output capturing and timeout control.

    Parameters:
        capture_output: Whether to capture and return stdout output from the command.
        timeout: Optional timeout in seconds for the subprocess execution.
        
    Returns:
        Callable: A decorator that wraps a function generating a CLI command (as list[str]) 
                  and returns a `CommandExecutionResult` upon execution.

    Raises:
        - Returns error information in `CommandExecutionResult` if the `claude` binary is missing.
        - Handles subprocess timeout and general exceptions gracefully.
    """
    def decorator(func: Callable[P, Sequence[str]]) -> Callable[P, Optional[CommandExecutionResult]]:
        @wraps(func)
        def wrapper(*args: P.args, **kwargs: P.kwargs) -> Optional[CommandExecutionResult]:
            command = ""
            try:
                command = func(*args, **kwargs)
                if not shutil.which("claude"):
                    return CommandExecutionResult(
                        success=str(False), 
                        command=" ".join(command), 
                        output=str(None), 
                        error="Error: 'claude' CLI tool is not installed or not found in PATH. "
                              "Please install it or ensure it is accessible from your shell environment."
                        )
                if not capture_output:
                    result = subprocess.run(
                        command, 
                        timeout=timeout, 
                        text=True
                        )
                else:
                    result = subprocess.run(
                        command, 
                        capture_output=True, 
                        text=True, 
                        check=False, 
                        timeout=timeout
                        )
                if result.returncode != 0:
                    return CommandExecutionResult(
                        success=str(False), 
                        command=" ".join(command), 
                        output=str(None), 
                        error=f"Command failed with exit code {result.returncode}.\nStderr: {result.stderr.strip()}"
                        )
                if capture_output:
                    return CommandExecutionResult(
                        success=str(True), 
                        command=" ".join(command), 
                        output=result.stdout.strip(), 
                        error=str(None)
                        )
            except subprocess.TimeoutExpired:
                return CommandExecutionResult(
                    success=str(False), 
                    command=str(command), 
                    output=str(None), 
                    error=f"Command timed out after {timeout} seconds. "
                    )
            except Exception as e:
                return CommandExecutionResult(
                    success=str(False), 
                    command=str(command), 
                    output=str(None), 
                    error=f"Unexpected error during command execution: {str(e)}"
                    )
        return wrapper
    return decorator